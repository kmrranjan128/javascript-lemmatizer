
 common logical programs in java 
--------------------------------------
 palindrome in java
-----------------------------
 public class Palindrome 
 {
 public static void main (String [] args) {

 Scanner sc = new Scanner(System.in);
 
  number = sc.nextInt();
  
    int temp = number;

    while (number!=0)

   {
    rem = number % 10;

    sum = (sum * 10)+rem ;

    number = number/10 ;
  }
  if (temp==sum)
  {
  s.o.p.ln ("entered number is palindrome="+ sum);


  write a program to swap two numbers without using third variable.
--------------------------------------------------------------------------
 public class Swap
 {
 public static void main(String a[]){
 int x = 10;
 int y = 20;
 System.out.println("Before swap:");
 System.out.println("x value: "+x);
 System.out.println("y value: "+y);
 x = x+y;
 y=x-y;
 x=x-y;
 System.out.println("After swap:");
 System.out.println("x value: "+x);
 System.out.println("y value: "+y);
    }
 }
 output : Before swap:
          x value: 10
          y value: 20
          After swap:
          x value: 20
          y value: 10


 pattern programs.
---------------------

 class Star 
 {
 public static void main(String[] args)   
 {
 int i,j;

 for(i=1; i<=6; i++)
 {
 for(j=1; j<i; j++)
 {
 System.out.print("*");
 }
 System.out.println();
 }
 }
 }  output

   *
   * *
   * * *
   * * * * 
   * * * * *

 second pattern program
---------------------------

 class Star 
 {
 public static void main(String[] args) 
 {
 int i, j;
 for(i=5;i>=1;i--)
 {
 for(j=1;j<=i;j++)
 {
 System.out.print("*");
 }
 System.out.println();
 }
 }
  }
    output

    * * * * *
    * * * *
    * * *
    * *
    *

 pattern program third
--------------------------

 class Star 
 {
 public static void main(String[] args) 
 {
int i, j, k;
for(i=5;i>=1;i--)
{
for(j=5;j>i;j--)
{
System.out.print(" ");
}
for(k=1;k<=i;k++)
{
System.out.print("*");
}
System.out.println();
}
}
}  output

      * * * * *
        * * * * 
          * * * 
            * * 
              *

















 
