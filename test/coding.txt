 core java logical questions 
---------------------------------------

 Logical interview programs
--------------------------------------
 1.> wtite a program fabonici series. 
 2.> how to convert binary to decimal and decimal to binary conversion.
 3.> write a program to swap two numbers without using third variable.
 4.> write a program factorial number.
 5.> write a program to check the given number is palindrome or not.
 6.> write a program a given number is prime or not.
 7.> write a program to check number is armstrong or not.
 8.> how to write custom exception in java.
 9.> how to create immutable class.
10.> how to create singleton class.
11.> how to create deadlock between two threads.
12.> write a program to implement hashcode() and equals().
13.> how sort element using comparable and comparator.

 String interview programs
------------------------------
 1.> how to reverse a string in java without using any API.
 2.> how to find duplicate charcater(no of occurance) in a string in java.
 2.> how to count occurance of each character in a string in java.
 3.> how do you remove all white spaces from a string in java.
 4.> how to check given String is palindrome or not.
 5.> how to check if two String are anargms.
 6.> how to find duplicate character in a String.

 Array interview programs
--------------------------------
 1.> write a java program to find duplicate element in an array.
 2.> write a java program to find second largest number in an array.
 3.> how to find missing number in the array.
 4.> how to find number occuring odd number of times in an array.
 5.> Write a java program to count occurrences of each element in an array.
 7.> How to find the missing element in integer array of 1 to 7.
 8.> How to cut or remove an element from the array.
 9.> How to get largest and smallest number in an array.

 Collections interview programs
-----------------------------------

 Arraylist
-----------------
 1.> basic arraylist operation.
 2.> how to read all element in arraylist by using iterator.
 3.> how to remove duplicate element in arraylist in java.
 4.> how to delete all element in array list.
 5.> how to sort arraylist using comparator.
 6.> how to convert array to arrylist and arraylist to array in java.
 7.> write a java program to sort an arraylist.
 
 Linkedlist
--------------------
 2.> how to reverse linked list in java.
 3.> how to find middle element of linked list in java.
 4.> how to find nth element from end of linked list in java.
 5.> how to reverse linked list in pairs.
 6.> basic operation of linked list.
 7.> how to remove element from linked list.
 8.> how to add element in last position in linked list.
 9.> how to add element in first position in linked list.

 Hashmap
---------------
 1.> basic hashmap operation.
 2.> how to iterate hashmap.
 3.> how to search key in hashmap.
 4.> how to search value in hashmap.
 5.> how to delete all elements from hashmap.
 6.> create and add obj in hashmap.
 7.> retrieving value from hashmap.

 Linked hashmap.
----------------------
 1.> basic linked hashmap operation.
 2.> how to iterate through linked hashmap.
 3.> how to delete all element from linked hashmap.
 4.> 

 Hashtable
---------------
 1.> basic hastable operation.
 2.> how to iterate through hashtable.
 3.> how to search key in hashtable.
 4.> how to search value in hashtable.
 5.> how to delete all element in hashtable.
  
 Hashset
-------------
 1.> basic hashset operation.
 2.> how to iterate hashset.
 3.> how to delete all element in hashset.

 linked hashset
----------------------
 1.> basic linked hashset operation.
 2.> how to iterate through linked hashset.
 3.> how to delete all element from linked hashset.
 4.> how to delete specific element from linked hashset.
 5.> how to search an element from linked hashset.
 
 TreeSet
------------
 1.> basic treeset operation.
 2.> how to create treeset with a list.
 3.> how to read obj from treeset using iterator.
 4.> how to create treeset using comparator.
 
 TreeMap
------------
-> basic treemap operation.
-> how to iterate through treemap.
-> how to search key in treemap.
-> how to search value in treemap.
-> how to delete all element in treemap.
-> how to sort keys in treemap using comparator.
-> how to get first key element from treemap(sorted map).
-> how to get last key element from treemap(sorted map).



 How to find duplicate element element in an array
-------------------------------------------------------------
 -> public class DuplicateElement {

	public static void main(String[] args) {

		String[] strArray=  {"java", "spring", "hibernate", "java"};

		for(int i=0;i<strArray.length-1;i++){

			for(int j=i+1;j<strArray.length;j++){

				if((strArray[i].equals(strArray[j]))&&(i!=j)){

					System.out.println("duplicate:"+ strArray[j
				}}}}}.

 How to iterate array in java ( using normal for loop).
-----------------------------------------------------------
 -> public class Array{
 
    public static void main(String[] args){
 
    int[] a1 = new int[]{45, 12, 78, 34, 89, 21};   //Iterating over an array using normal for loop
 
    for (int i = 0; i < a1.length; i++) {
 
    System.out.println(a1[i]);
 
     }}}

 using for each loop
-----------------------------
-> public class Array{
 
   public static void main(String[] args){
 
   int[] a2 = new int[]{45, 12, 78, 34, 89, 21};  //Iterating over an array using extended for loop
 
   for (int i: a2){
 
   System.out.println(i);
 
    }}}

 How to find missing number an integer array.
----------------------------------------------------
 -> Find the sum of n number using formula n=n*(n+1)/2.
 -> Find the sum of elements present in given array.
 -> Substract (sum of n numbers – sum of elements present in the array).
 eg. 
     int[] arr1={7,5,6,1,4,2};
     Missing numner : 3
     int[] arr2={5,3,1,2};
     Missing numner : 4

 public class MissingNumber {
 
 public static void main(String[] args) {
   
  int[] arr1={7,5,6,1,4,2};
  System.out.println("Missing number from array arr1: "+missingNumber(arr1));
  int[] arr2={5,3,1,2};
  System.out.println("Missing number from array arr2: "+missingNumber(arr2));
 
 }
 
 public static int missingNumber(int[] arr)
 {
  int n=arr.length+1;
  int sum=n*(n+1)/2;
  int restSum=0;
  for (int i = 0; i < arr.length; i++) {
   restSum+=arr[i];
  }
  int missingNumber=sum-restSum;
  return missingNumber;
 }
}
 
 How to find second largest number in array.
-----------------------------------------------------
 -> int[] arr1={7,5,6,1,4,2};
    Second largest element in the array : 6

 -> Initialize highest and secondHighest with minimum possible value.
 -> Iterate over array.
 -> If current element is greater than highest.
 -> Assign secondHighest = highest.
 -> Assign highest = currentElement.
 -> Else if current element is greater than secondHighest.
 -> Assign secondHighest =current element.

 public class FindSecondLargestMain {
 public static void main(String args[])
 {
 int[] arr1={7,5,6,1,4,2};
 int secondHighest=findSecondLargestNumberInTheArray(arr1);
 System.out.println("Second largest element in the array : "+ secondHighest);
 }
 
 public static int findSecondLargestNumberInTheArray(int array[])
 {
 // Initialize these to the smallest value possible
   int highest = Integer.MIN_VALUE;
  int secondHighest = Integer.MIN_VALUE;
 
 // Loop over the array
 for (int i = 0; i < array.length; i++) {
 
 // If current element is greater than highest
 if (array[i] > highest) {
 
 // assign second highest element to highest element 
 secondHighest = highest;
 
 // highest element to current element
 highest = array[i];
 } else if (array[i] > secondHighest)
 // Just replace the second highest
 secondHighest = array[i];
 }
 
 
 // After exiting the loop, secondHighest now represents the second
 // largest value in the array
 return secondHighest;
 }
}
  output- Second largest element in the array : 6.


 How to get largest and smallest number in an array.
------------------------------------------------------------
 -> We use two variables to store largest and smallest number.
 -> First, we initialize largest with Integer.MIN_VALUE and.
 -> Next, we initialize smallest with Integer.MAX_VALUE.
 -> In each iteration of the for loop, we will compare present number with largest and smallest number, and we will update.
 -> If a number is larger than largest, then it cannot be smaller than smallest. That means no need to check if the first condition is true,
 -> We will use the if-else code block, where else part will only execute if the first condition is false means not true.
 
 public class MaximumMinimumArrayExample{
 
 public static void largestAndSmallest(int[] numbers) {
 
 int largest = Integer.MIN_VALUE;
 
 int smallest = Integer.MAX_VALUE;
 
 for (int number : numbers) {
 
 if (number > largest) {
 
 largest = number;
 }
 else if (number < smallest) {
 
 smallest = number;
 
 } }
 System.out.println("Largest is : " + largest);
 
 System.out.println("Smallest is : " + smallest); } }


























